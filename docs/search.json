[
  {
    "objectID": "index_classification.html",
    "href": "index_classification.html",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\n    \"data/ensanut_f1_informacion_general.csv\",\n    sep=\";\",\n    encoding=\"utf-8-sig\",\n    quotechar='\"',\n    escapechar=\"\\\\\",\n    on_bad_lines=\"skip\",\n    skipinitialspace=True,\n    low_memory=False\n)\ndf = df.rename(columns=lambda c: c.replace(\"\\ufeff\", \"\"))\n\ndf.head()\n\n\n\n\n\n\n\n\narea\nciudad\nzona\nsector\nvivienda\nhogar\nnciudad\nregional\nvo\ntothog\n...\nif9a\nif9b\nif10\nnf12\nn1_flebo\nn2_flebo\nidhog\nidviv\nidsector\npw\n\n\n\n\n0\nurbano\ncuenca\n1\n1\n1\n1\nCUENCA\nsur\n4\n1\n...\nsi\n2.0\n4.0\n2.0\n4402.0\n4402.0\n10150001001011\n1015000100101\n10150001001\n274,240540540541\n\n\n1\nurbano\ncuenca\n1\n1\n2\n1\nCUENCA\nsur\n11\n1\n...\nno\nNaN\n2.0\n0.0\nNaN\nNaN\n10150001001021\n1015000100102\n10150001001\n274,240540540541\n\n\n2\nurbano\ncuenca\n1\n1\n3\n1\nCUENCA\nsur\n12\n1\n...\nsi\n1.0\n3.0\n2.0\n4202.0\n4202.0\n10150001001031\n1015000100103\n10150001001\n274,240540540541\n\n\n3\nurbano\ncuenca\n1\n1\n5\n1\nCUENCA\nsur\n7\n1\n...\nsi\n1.0\n3.0\n1.0\n4401.0\n4401.0\n10150001001051\n1015000100105\n10150001001\n274,240540540541\n\n\n4\nurbano\ncuenca\n1\n1\n6\n1\nCUENCA\nsur\n8\n1\n...\nno\nNaN\n1.0\n0.0\nNaN\nNaN\n10150001001061\n1015000100106\n10150001001\n274,240540540541\n\n\n\n\n5 rows × 59 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 23265 entries, 0 to 23264\nData columns (total 59 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   area      23265 non-null  object \n 1   ciudad    23265 non-null  object \n 2   zona      23265 non-null  int64  \n 3   sector    23265 non-null  int64  \n 4   vivienda  23265 non-null  int64  \n 5   hogar     23265 non-null  int64  \n 6   nciudad   23265 non-null  object \n 7   regional  23232 non-null  object \n 8   vo        23265 non-null  int64  \n 9   tothog    23265 non-null  int64  \n 10  altitud   23265 non-null  object \n 11  resultad  23265 non-null  object \n 12  informa   19954 non-null  object \n 13  parentes  19954 non-null  object \n 14  codsup    23265 non-null  object \n 15  codenc    23265 non-null  object \n 16  codcod    23265 non-null  object \n 17  coddig    23265 non-null  int64  \n 18  supere1   23265 non-null  object \n 19  supere2   23265 non-null  object \n 20  supere3   23265 non-null  object \n 21  superr1   23265 non-null  object \n 22  superr2   23265 non-null  object \n 23  superr3   23265 non-null  object \n 24  supern1   23265 non-null  object \n 25  supern2   23265 non-null  object \n 26  supern3   23265 non-null  object \n 27  dia       23265 non-null  object \n 28  mes       23265 non-null  object \n 29  anio      23265 non-null  object \n 30  numpers   19949 non-null  float64\n 31  mi00a     19949 non-null  object \n 32  mi00b     295 non-null    float64\n 33  mo00a     19949 non-null  object \n 34  mo00b     308 non-null    float64\n 35  if2       19949 non-null  object \n 36  if3a      19949 non-null  object \n 37  if3b      5831 non-null   float64\n 38  if4a      19949 non-null  object \n 39  if4b      8205 non-null   float64\n 40  if4o      8205 non-null   float64\n 41  if5a      19949 non-null  object \n 42  if5b      8073 non-null   float64\n 43  if6a      19949 non-null  object \n 44  if6b      10606 non-null  float64\n 45  if7a      19949 non-null  object \n 46  if7b      19154 non-null  float64\n 47  if8a      19949 non-null  object \n 48  if8b      11937 non-null  float64\n 49  if9a      19949 non-null  object \n 50  if9b      13839 non-null  float64\n 51  if10      19949 non-null  float64\n 52  nf12      19949 non-null  float64\n 53  n1_flebo  10019 non-null  float64\n 54  n2_flebo  10019 non-null  float64\n 55  idhog     23265 non-null  int64  \n 56  idviv     23265 non-null  int64  \n 57  idsector  23265 non-null  int64  \n 58  pw        19949 non-null  object \ndtypes: float64(15), int64(10), object(34)\nmemory usage: 10.5+ MB\n\n\n\n# Porcentaje de faltantes por columna (top 15)\ndf.isna().mean().sort_values(ascending=False).head(15)\n\nmi00b       0.987320\nmo00b       0.986761\nif3b        0.749366\nif5b        0.652998\nif4o        0.647324\nif4b        0.647324\nn2_flebo    0.569353\nn1_flebo    0.569353\nif6b        0.544122\nif8b        0.486912\nif9b        0.405158\nif7b        0.176703\nnumpers     0.142532\nif3a        0.142532\nif4a        0.142532\ndtype: float64"
  },
  {
    "objectID": "index_classification.html#carga-y-exploración-inicial",
    "href": "index_classification.html#carga-y-exploración-inicial",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.read_csv(\n    \"data/ensanut_f1_informacion_general.csv\",\n    sep=\";\",\n    encoding=\"utf-8-sig\",\n    quotechar='\"',\n    escapechar=\"\\\\\",\n    on_bad_lines=\"skip\",\n    skipinitialspace=True,\n    low_memory=False\n)\ndf = df.rename(columns=lambda c: c.replace(\"\\ufeff\", \"\"))\n\ndf.head()\n\n\n\n\n\n\n\n\narea\nciudad\nzona\nsector\nvivienda\nhogar\nnciudad\nregional\nvo\ntothog\n...\nif9a\nif9b\nif10\nnf12\nn1_flebo\nn2_flebo\nidhog\nidviv\nidsector\npw\n\n\n\n\n0\nurbano\ncuenca\n1\n1\n1\n1\nCUENCA\nsur\n4\n1\n...\nsi\n2.0\n4.0\n2.0\n4402.0\n4402.0\n10150001001011\n1015000100101\n10150001001\n274,240540540541\n\n\n1\nurbano\ncuenca\n1\n1\n2\n1\nCUENCA\nsur\n11\n1\n...\nno\nNaN\n2.0\n0.0\nNaN\nNaN\n10150001001021\n1015000100102\n10150001001\n274,240540540541\n\n\n2\nurbano\ncuenca\n1\n1\n3\n1\nCUENCA\nsur\n12\n1\n...\nsi\n1.0\n3.0\n2.0\n4202.0\n4202.0\n10150001001031\n1015000100103\n10150001001\n274,240540540541\n\n\n3\nurbano\ncuenca\n1\n1\n5\n1\nCUENCA\nsur\n7\n1\n...\nsi\n1.0\n3.0\n1.0\n4401.0\n4401.0\n10150001001051\n1015000100105\n10150001001\n274,240540540541\n\n\n4\nurbano\ncuenca\n1\n1\n6\n1\nCUENCA\nsur\n8\n1\n...\nno\nNaN\n1.0\n0.0\nNaN\nNaN\n10150001001061\n1015000100106\n10150001001\n274,240540540541\n\n\n\n\n5 rows × 59 columns\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 23265 entries, 0 to 23264\nData columns (total 59 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   area      23265 non-null  object \n 1   ciudad    23265 non-null  object \n 2   zona      23265 non-null  int64  \n 3   sector    23265 non-null  int64  \n 4   vivienda  23265 non-null  int64  \n 5   hogar     23265 non-null  int64  \n 6   nciudad   23265 non-null  object \n 7   regional  23232 non-null  object \n 8   vo        23265 non-null  int64  \n 9   tothog    23265 non-null  int64  \n 10  altitud   23265 non-null  object \n 11  resultad  23265 non-null  object \n 12  informa   19954 non-null  object \n 13  parentes  19954 non-null  object \n 14  codsup    23265 non-null  object \n 15  codenc    23265 non-null  object \n 16  codcod    23265 non-null  object \n 17  coddig    23265 non-null  int64  \n 18  supere1   23265 non-null  object \n 19  supere2   23265 non-null  object \n 20  supere3   23265 non-null  object \n 21  superr1   23265 non-null  object \n 22  superr2   23265 non-null  object \n 23  superr3   23265 non-null  object \n 24  supern1   23265 non-null  object \n 25  supern2   23265 non-null  object \n 26  supern3   23265 non-null  object \n 27  dia       23265 non-null  object \n 28  mes       23265 non-null  object \n 29  anio      23265 non-null  object \n 30  numpers   19949 non-null  float64\n 31  mi00a     19949 non-null  object \n 32  mi00b     295 non-null    float64\n 33  mo00a     19949 non-null  object \n 34  mo00b     308 non-null    float64\n 35  if2       19949 non-null  object \n 36  if3a      19949 non-null  object \n 37  if3b      5831 non-null   float64\n 38  if4a      19949 non-null  object \n 39  if4b      8205 non-null   float64\n 40  if4o      8205 non-null   float64\n 41  if5a      19949 non-null  object \n 42  if5b      8073 non-null   float64\n 43  if6a      19949 non-null  object \n 44  if6b      10606 non-null  float64\n 45  if7a      19949 non-null  object \n 46  if7b      19154 non-null  float64\n 47  if8a      19949 non-null  object \n 48  if8b      11937 non-null  float64\n 49  if9a      19949 non-null  object \n 50  if9b      13839 non-null  float64\n 51  if10      19949 non-null  float64\n 52  nf12      19949 non-null  float64\n 53  n1_flebo  10019 non-null  float64\n 54  n2_flebo  10019 non-null  float64\n 55  idhog     23265 non-null  int64  \n 56  idviv     23265 non-null  int64  \n 57  idsector  23265 non-null  int64  \n 58  pw        19949 non-null  object \ndtypes: float64(15), int64(10), object(34)\nmemory usage: 10.5+ MB\n\n\n\n# Porcentaje de faltantes por columna (top 15)\ndf.isna().mean().sort_values(ascending=False).head(15)\n\nmi00b       0.987320\nmo00b       0.986761\nif3b        0.749366\nif5b        0.652998\nif4o        0.647324\nif4b        0.647324\nn2_flebo    0.569353\nn1_flebo    0.569353\nif6b        0.544122\nif8b        0.486912\nif9b        0.405158\nif7b        0.176703\nnumpers     0.142532\nif3a        0.142532\nif4a        0.142532\ndtype: float64"
  },
  {
    "objectID": "index_classification.html#selección-de-variable-objetivo-binaria-y-eda-breve",
    "href": "index_classification.html#selección-de-variable-objetivo-binaria-y-eda-breve",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "2) Selección de variable objetivo (binaria) y EDA breve",
    "text": "2) Selección de variable objetivo (binaria) y EDA breve\n\nPuedes fijar manualmente la columna objetivo asignando TARGET = \"nombre_columna\". Si lo dejas vacío, se detectará automáticamente la primera columna con exactamente 2 clases.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nTARGET = \"\"  # por ejemplo: \"area\"\n\n# Detectar objetivo binario si no se especifica\ntarget_col = TARGET.strip() if isinstance(TARGET, str) and TARGET.strip() else None\nif target_col is None:\n    for c in df.columns:\n        nun = df[c].dropna().nunique()\n        if nun == 2:\n            target_col = c\n            break\n\nif target_col is None:\n    raise ValueError(\"No se detectó una columna binaria automáticamente. Define TARGET con el nombre de tu variable objetivo.\")\n\ny = df[target_col].astype(str).str.strip()\nX = df.drop(columns=[target_col])\n\n# Distribución de clases\nvc = y.value_counts(dropna=False)\ndisplay(vc)\n\nplt.figure()\nvc.plot(kind=\"bar\")\nplt.title(f\"Distribución de clases - {target_col}\")\nplt.xlabel(\"Clase\"); plt.ylabel(\"Frecuencia\")\nplt.tight_layout(); plt.show()\n\narea\nurbano    14122\nrural      9143\nName: count, dtype: int64"
  },
  {
    "objectID": "index_classification.html#normalización-de-tipos-y-selección-de-features",
    "href": "index_classification.html#normalización-de-tipos-y-selección-de-features",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "3) Normalización de tipos y selección de features",
    "text": "3) Normalización de tipos y selección de features\n\nimport pandas as pd\n\ndef to_numeric_if_mostly_numeric(series, threshold=0.9):\n    s = series.astype(str)\n    # normaliza: quita separador de miles y usa punto decimal\n    s_norm = (\n        s.str.replace(r\"(?&lt;=\\d)[\\.\\s](?=\\d{3}\\b)\", \"\", regex=True)  # quita . o espacio de miles\n         .str.replace(\",\", \".\", regex=False)                             # coma -&gt; punto decimal\n    )\n    s_num = pd.to_numeric(s_norm, errors=\"coerce\")\n    if s_num.notna().mean() &gt;= threshold:\n        return s_num\n    return series\n\n# Aplica a columnas 'object' y luego recalcula numéricas/categóricas\nfor c in X.columns:\n    if X[c].dtype == object:\n        X[c] = to_numeric_if_mostly_numeric(X[c], threshold=0.9)\n\nnum_cols = [c for c in X.columns if pd.api.types.is_numeric_dtype(X[c])]\ncat_cols = [c for c in X.columns if c not in num_cols]\n\n# Seguridad adicional: fuerza categóricas a string\nX[cat_cols] = X[cat_cols].astype(str)\n\nprint(\"Numéricas:\", len(num_cols), \" | Categóricas:\", len(cat_cols))\n\nNuméricas: 30  | Categóricas: 28"
  },
  {
    "objectID": "index_classification.html#división-traintest-y-pipeline-imputación-escalado-one-hot-modelo",
    "href": "index_classification.html#división-traintest-y-pipeline-imputación-escalado-one-hot-modelo",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "4) División Train/Test y Pipeline (imputación, escalado, one-hot) + Modelo",
    "text": "4) División Train/Test y Pipeline (imputación, escalado, one-hot) + Modelo\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\n\n# División estratificada\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42, stratify=y\n)\n\n# Numéricas: imputación + escalado\nnum_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    (\"scaler\", StandardScaler())\n])\n\n# Categóricas: imputación + one-hot (ya forzamos str en X[cat_cols])\ncat_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\",\n                             sparse_output=False,\n                             max_categories=50))\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", num_transformer, num_cols),\n        (\"cat\", cat_transformer, cat_cols)\n    ],\n    remainder=\"drop\"\n)\n\nlogreg = LogisticRegression(max_iter=1000, solver=\"lbfgs\")\n\nmodel = Pipeline(steps=[\n    (\"prep\", preprocessor),\n    (\"clf\", logreg)\n])\n\nmodel.fit(X_train, y_train)\n\nPipeline(steps=[('prep',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer(strategy='median')),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['zona', 'sector', 'vivienda',\n                                                   'hogar', 'vo', 'tothog',\n                                                   'altitud', 'codsup',\n                                                   'codenc', 'codcod', 'coddig',\n                                                   'dia', 'numpers', 'mi00b',\n                                                   'mo00b', 'if3b', 'if4b',\n                                                   'if4o', 'if5b', 'if6b',\n                                                   'if7b', 'if8b', 'if9b',\n                                                   'if10', 'nf12...\n                                                                   OneHotEncoder(handle_unknown='ignore',\n                                                                                 max_categories=50,\n                                                                                 sparse_output=False))]),\n                                                  ['ciudad', 'nciudad',\n                                                   'regional', 'resultad',\n                                                   'informa', 'parentes',\n                                                   'supere1', 'supere2',\n                                                   'supere3', 'superr1',\n                                                   'superr2', 'superr3',\n                                                   'supern1', 'supern2',\n                                                   'supern3', 'mes', 'anio',\n                                                   'mi00a', 'mo00a', 'if2',\n                                                   'if3a', 'if4a', 'if5a',\n                                                   'if6a', 'if7a', 'if8a',\n                                                   'if9a', 'pw'])])),\n                ('clf', LogisticRegression(max_iter=1000))])In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  Pipeline?Documentation for PipelineiFittedPipeline(steps=[('prep',\n                 ColumnTransformer(transformers=[('num',\n                                                  Pipeline(steps=[('imputer',\n                                                                   SimpleImputer(strategy='median')),\n                                                                  ('scaler',\n                                                                   StandardScaler())]),\n                                                  ['zona', 'sector', 'vivienda',\n                                                   'hogar', 'vo', 'tothog',\n                                                   'altitud', 'codsup',\n                                                   'codenc', 'codcod', 'coddig',\n                                                   'dia', 'numpers', 'mi00b',\n                                                   'mo00b', 'if3b', 'if4b',\n                                                   'if4o', 'if5b', 'if6b',\n                                                   'if7b', 'if8b', 'if9b',\n                                                   'if10', 'nf12...\n                                                                   OneHotEncoder(handle_unknown='ignore',\n                                                                                 max_categories=50,\n                                                                                 sparse_output=False))]),\n                                                  ['ciudad', 'nciudad',\n                                                   'regional', 'resultad',\n                                                   'informa', 'parentes',\n                                                   'supere1', 'supere2',\n                                                   'supere3', 'superr1',\n                                                   'superr2', 'superr3',\n                                                   'supern1', 'supern2',\n                                                   'supern3', 'mes', 'anio',\n                                                   'mi00a', 'mo00a', 'if2',\n                                                   'if3a', 'if4a', 'if5a',\n                                                   'if6a', 'if7a', 'if8a',\n                                                   'if9a', 'pw'])])),\n                ('clf', LogisticRegression(max_iter=1000))])  prep: ColumnTransformer?Documentation for prep: ColumnTransformerColumnTransformer(transformers=[('num',\n                                 Pipeline(steps=[('imputer',\n                                                  SimpleImputer(strategy='median')),\n                                                 ('scaler', StandardScaler())]),\n                                 ['zona', 'sector', 'vivienda', 'hogar', 'vo',\n                                  'tothog', 'altitud', 'codsup', 'codenc',\n                                  'codcod', 'coddig', 'dia', 'numpers', 'mi00b',\n                                  'mo00b', 'if3b', 'if4b', 'if4o', 'if5b',\n                                  'if6b', 'if7b', 'if8b', 'if9b', 'if10',\n                                  'nf12', 'n1_flebo', 'n2_flebo',...\n                                                  SimpleImputer(strategy='most_frequent')),\n                                                 ('onehot',\n                                                  OneHotEncoder(handle_unknown='ignore',\n                                                                max_categories=50,\n                                                                sparse_output=False))]),\n                                 ['ciudad', 'nciudad', 'regional', 'resultad',\n                                  'informa', 'parentes', 'supere1', 'supere2',\n                                  'supere3', 'superr1', 'superr2', 'superr3',\n                                  'supern1', 'supern2', 'supern3', 'mes',\n                                  'anio', 'mi00a', 'mo00a', 'if2', 'if3a',\n                                  'if4a', 'if5a', 'if6a', 'if7a', 'if8a',\n                                  'if9a', 'pw'])]) num['zona', 'sector', 'vivienda', 'hogar', 'vo', 'tothog', 'altitud', 'codsup', 'codenc', 'codcod', 'coddig', 'dia', 'numpers', 'mi00b', 'mo00b', 'if3b', 'if4b', 'if4o', 'if5b', 'if6b', 'if7b', 'if8b', 'if9b', 'if10', 'nf12', 'n1_flebo', 'n2_flebo', 'idhog', 'idviv', 'idsector']  SimpleImputer?Documentation for SimpleImputerSimpleImputer(strategy='median')  StandardScaler?Documentation for StandardScalerStandardScaler() cat['ciudad', 'nciudad', 'regional', 'resultad', 'informa', 'parentes', 'supere1', 'supere2', 'supere3', 'superr1', 'superr2', 'superr3', 'supern1', 'supern2', 'supern3', 'mes', 'anio', 'mi00a', 'mo00a', 'if2', 'if3a', 'if4a', 'if5a', 'if6a', 'if7a', 'if8a', 'if9a', 'pw']  SimpleImputer?Documentation for SimpleImputerSimpleImputer(strategy='most_frequent')  OneHotEncoder?Documentation for OneHotEncoderOneHotEncoder(handle_unknown='ignore', max_categories=50, sparse_output=False)  LogisticRegression?Documentation for LogisticRegressionLogisticRegression(max_iter=1000)"
  },
  {
    "objectID": "index_classification.html#predicciones-y-métricas",
    "href": "index_classification.html#predicciones-y-métricas",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "5) Predicciones y métricas",
    "text": "5) Predicciones y métricas\n\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n\ny_pred = model.predict(X_test)\n\n# definir clase positiva como la \"mayor\" por orden (ajústalo si prefieres otra)\npos_label = sorted(y_test.unique())[-1]\n\nacc  = accuracy_score(y_test, y_pred)\nprec = precision_score(y_test, y_pred, pos_label=pos_label)\nrec  = recall_score(y_test, y_pred, pos_label=pos_label)\nf1   = f1_score(y_test, y_pred, pos_label=pos_label)\n\nprint(\"Accuracy :\", acc)\nprint(\"Precision:\", prec)\nprint(\"Recall   :\", rec)\nprint(\"F1       :\", f1)\n\nprint(\"\\nClassification Report:\\n\")\nprint(classification_report(y_test, y_pred))\n\nAccuracy : 0.9903288201160542\nPrecision: 0.9897779344377864\nRecall   : 0.9943342776203966\nF1       : 0.9920508744038156\n\nClassification Report:\n\n              precision    recall  f1-score   support\n\n       rural       0.99      0.98      0.99      1829\n      urbano       0.99      0.99      0.99      2824\n\n    accuracy                           0.99      4653\n   macro avg       0.99      0.99      0.99      4653\nweighted avg       0.99      0.99      0.99      4653"
  },
  {
    "objectID": "index_classification.html#matriz-de-confusión",
    "href": "index_classification.html#matriz-de-confusión",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "6) Matriz de confusión",
    "text": "6) Matriz de confusión\n\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlabels = sorted(y_test.unique())\ncm = confusion_matrix(y_test, y_pred, labels=labels)\n\nfig, ax = plt.subplots()\nim = ax.imshow(cm, cmap=\"Blues\")\nax.set_title(\"Matriz de confusión\")\nax.set_xlabel(\"Predicha\"); ax.set_ylabel(\"Real\")\nax.set_xticks(range(len(labels))); ax.set_xticklabels(labels)\nax.set_yticks(range(len(labels))); ax.set_yticklabels(labels)\nfor i in range(cm.shape[0]):\n    for j in range(cm.shape[1]):\n        ax.text(j, i, cm[i, j], ha=\"center\", va=\"center\")\nfig.colorbar(im)\nplt.tight_layout(); plt.show()"
  },
  {
    "objectID": "index_classification.html#curva-roc-y-auc",
    "href": "index_classification.html#curva-roc-y-auc",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "7) Curva ROC y AUC",
    "text": "7) Curva ROC y AUC\n\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\nif len(labels) == 2:\n    pos_label = sorted(y_train.unique())[-1]\n    y_proba = model.predict_proba(X_test)[:, list(model.classes_).index(pos_label)]\n\n    fpr, tpr, thr = roc_curve(y_test, y_proba, pos_label=pos_label)\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure()\n    plt.plot(fpr, tpr, label=f\"ROC (AUC = {roc_auc:.3f})\")\n    plt.plot([0,1],[0,1], \"--\")\n    plt.xlabel(\"False Positive Rate\"); plt.ylabel(\"True Positive Rate\")\n    plt.title(\"Curva ROC\"); plt.legend()\n    plt.tight_layout(); plt.show()\n\n    print(\"AUC:\", roc_auc)\nelse:\n    print(\"ROC/AUC solo aplica a problemas estrictamente binarios (2 clases).\")\n\n\n\n\n\n\n\n\nAUC: 0.9994733882971392"
  },
  {
    "objectID": "index_classification.html#comentarios-finales",
    "href": "index_classification.html#comentarios-finales",
    "title": "Clasificación Binaria con Logistic Regression",
    "section": "8) Comentarios finales",
    "text": "8) Comentarios finales\n\nNormalización de tipos: convertir texto numérico a número y forzar categóricas a string evita el error ['float','str'] en OneHotEncoder.\nPipeline asegura reproducibilidad (imputación/escalado/one-hot + modelo).\nSi las métricas no son satisfactorias: prueba class_weight='balanced', ajustar C en LogisticRegression, selección/ingeniería de features o modelos alternativos."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Midterm",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv(\"data/1.-mpceip_deeco_exportaciones_eeuu_2024_01.csv\", encoding=\"latin1\")\ndf.head()\n\n\n\n\n\n\n\n\nAño\nMes\nPaís Destino\nCapítulo\nProd Principal N4.PP N4 BCE (Descrip)\n6D\n8D\nTRADICIONAL Y NO TRAD\nNo Petrolero Y PETRO\nCódigo Subpartida\nSuma de FOB (miles)\nSuma de TM (Peso Neto)\n\n\n\n\n0\n2024\n1\nESTADOS UNIDOS\n1\nAnimales Vivos No Para Alimentación\n10129\n1012990\nNO TRADICIONAL\nNo Petrolero\n101299000\n3.0000\n0.58000\n\n\n1\n2024\n1\nESTADOS UNIDOS\n1\nAnimales Vivos No Para Alimentación\n10620\n1062000\nNO TRADICIONAL\nNo Petrolero\n106200000\n200.0000\n22.50000\n\n\n2\n2024\n1\nESTADOS UNIDOS\n2\nCarne_ Leche Y Elaborados\n20890\n2089000\nNO TRADICIONAL\nNo Petrolero\n208900000\n31.0580\n22.90720\n\n\n3\n2024\n1\nESTADOS UNIDOS\n3\nAnimales Vivos No Para Alimentación\n30119\n3011900\nNO TRADICIONAL\nNo Petrolero\n301190000\n4.6980\n0.08000\n\n\n4\n2024\n1\nESTADOS UNIDOS\n3\nAnimales Vivos No Para Alimentación\n30199\n3019919\nNO TRADICIONAL\nNo Petrolero\n301991990\n148.3564\n12.16398"
  },
  {
    "objectID": "index.html#importar-el-dataset",
    "href": "index.html#importar-el-dataset",
    "title": "Midterm",
    "section": "",
    "text": "import pandas as pd\ndf = pd.read_csv(\"data/1.-mpceip_deeco_exportaciones_eeuu_2024_01.csv\", encoding=\"latin1\")\ndf.head()\n\n\n\n\n\n\n\n\nAño\nMes\nPaís Destino\nCapítulo\nProd Principal N4.PP N4 BCE (Descrip)\n6D\n8D\nTRADICIONAL Y NO TRAD\nNo Petrolero Y PETRO\nCódigo Subpartida\nSuma de FOB (miles)\nSuma de TM (Peso Neto)\n\n\n\n\n0\n2024\n1\nESTADOS UNIDOS\n1\nAnimales Vivos No Para Alimentación\n10129\n1012990\nNO TRADICIONAL\nNo Petrolero\n101299000\n3.0000\n0.58000\n\n\n1\n2024\n1\nESTADOS UNIDOS\n1\nAnimales Vivos No Para Alimentación\n10620\n1062000\nNO TRADICIONAL\nNo Petrolero\n106200000\n200.0000\n22.50000\n\n\n2\n2024\n1\nESTADOS UNIDOS\n2\nCarne_ Leche Y Elaborados\n20890\n2089000\nNO TRADICIONAL\nNo Petrolero\n208900000\n31.0580\n22.90720\n\n\n3\n2024\n1\nESTADOS UNIDOS\n3\nAnimales Vivos No Para Alimentación\n30119\n3011900\nNO TRADICIONAL\nNo Petrolero\n301190000\n4.6980\n0.08000\n\n\n4\n2024\n1\nESTADOS UNIDOS\n3\nAnimales Vivos No Para Alimentación\n30199\n3019919\nNO TRADICIONAL\nNo Petrolero\n301991990\n148.3564\n12.16398"
  },
  {
    "objectID": "index.html#reales-vs-predichos",
    "href": "index.html#reales-vs-predichos",
    "title": "Midterm",
    "section": "Reales vs Predichos",
    "text": "Reales vs Predichos\n\nplt.figure()\nplt.scatter(y_test, y_pred, alpha=0.4)\nlims = [min(y_test.min(), y_pred.min()), max(y_test.max(), y_pred.max())]\nplt.plot(lims, lims)\nplt.xlabel(\"Real\"); plt.ylabel(\"Predicho\")\nplt.title(\"Valores reales vs. predichos\")\nplt.show()"
  },
  {
    "objectID": "index.html#curva-de-aprendizaje-muestra",
    "href": "index.html#curva-de-aprendizaje-muestra",
    "title": "Midterm",
    "section": "Curva de aprendizaje (muestra)",
    "text": "Curva de aprendizaje (muestra)\n\nfrom sklearn.model_selection import learning_curve\n\nsample_size = min(10000, len(X))\nX_sample = X.sample(sample_size, random_state=42)\ny_sample = y.loc[X_sample.index]\n\ntrain_sizes, train_scores, test_scores = learning_curve(\n    model, X_sample, y_sample, cv=3, scoring=\"r2\",\n    train_sizes=np.linspace(0.1, 1.0, 5)\n)\n\nplt.figure()\nplt.plot(train_sizes, train_scores.mean(axis=1), marker=\"o\", label=\"Entrenamiento\")\nplt.plot(train_sizes, test_scores.mean(axis=1), marker=\"o\", label=\"Validación CV\")\nplt.xlabel(\"Tamaño de entrenamiento (muestra)\")\nplt.ylabel(\"R² promedio (CV)\")\nplt.title(\"Curva de aprendizaje (muestra)\")\nplt.legend()\nplt.show()"
  }
]