{
  "hash": "bc5df0e69f1e056eccaf813235003be3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Midterm\"\nauthor: \"Jorge Delgado\" \ndate: \"2025-10-04\"\n# format:\n#   html:\n#     embed-resources: true\n---\n\n# Introduccion a Altair\n\n\n## Importar el dataset\n\n# Carga y exploración inicial\n\n::: {#9bc68cfa .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv(\"data/1.-mpceip_deeco_exportaciones_eeuu_2024_01.csv\", encoding=\"latin1\")\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Año</th>\n      <th>Mes</th>\n      <th>País Destino</th>\n      <th>Capítulo</th>\n      <th>Prod Principal N4.PP N4 BCE (Descrip)</th>\n      <th>6D</th>\n      <th>8D</th>\n      <th>TRADICIONAL Y NO TRAD</th>\n      <th>No Petrolero Y PETRO</th>\n      <th>Código Subpartida</th>\n      <th>Suma de FOB (miles)</th>\n      <th>Suma de TM (Peso Neto)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024</td>\n      <td>1</td>\n      <td>ESTADOS UNIDOS</td>\n      <td>1</td>\n      <td>Animales Vivos No Para Alimentación</td>\n      <td>10129</td>\n      <td>1012990</td>\n      <td>NO TRADICIONAL</td>\n      <td>No Petrolero</td>\n      <td>101299000</td>\n      <td>3.0000</td>\n      <td>0.58000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024</td>\n      <td>1</td>\n      <td>ESTADOS UNIDOS</td>\n      <td>1</td>\n      <td>Animales Vivos No Para Alimentación</td>\n      <td>10620</td>\n      <td>1062000</td>\n      <td>NO TRADICIONAL</td>\n      <td>No Petrolero</td>\n      <td>106200000</td>\n      <td>200.0000</td>\n      <td>22.50000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024</td>\n      <td>1</td>\n      <td>ESTADOS UNIDOS</td>\n      <td>2</td>\n      <td>Carne_ Leche Y Elaborados</td>\n      <td>20890</td>\n      <td>2089000</td>\n      <td>NO TRADICIONAL</td>\n      <td>No Petrolero</td>\n      <td>208900000</td>\n      <td>31.0580</td>\n      <td>22.90720</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2024</td>\n      <td>1</td>\n      <td>ESTADOS UNIDOS</td>\n      <td>3</td>\n      <td>Animales Vivos No Para Alimentación</td>\n      <td>30119</td>\n      <td>3011900</td>\n      <td>NO TRADICIONAL</td>\n      <td>No Petrolero</td>\n      <td>301190000</td>\n      <td>4.6980</td>\n      <td>0.08000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2024</td>\n      <td>1</td>\n      <td>ESTADOS UNIDOS</td>\n      <td>3</td>\n      <td>Animales Vivos No Para Alimentación</td>\n      <td>30199</td>\n      <td>3019919</td>\n      <td>NO TRADICIONAL</td>\n      <td>No Petrolero</td>\n      <td>301991990</td>\n      <td>148.3564</td>\n      <td>12.16398</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#63f38360 .cell execution_count=2}\n``` {.python .cell-code}\ndf.info()\ndf.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 132660 entries, 0 to 132659\nData columns (total 12 columns):\n #   Column                                 Non-Null Count   Dtype  \n---  ------                                 --------------   -----  \n 0   Año                                    132660 non-null  int64  \n 1   Mes                                    132660 non-null  int64  \n 2   País Destino                           132660 non-null  object \n 3   Capítulo                               132660 non-null  int64  \n 4   Prod Principal N4.PP N4 BCE (Descrip)  132660 non-null  object \n 5   6D                                     132660 non-null  int64  \n 6   8D                                     132660 non-null  int64  \n 7   TRADICIONAL Y NO TRAD                  132660 non-null  object \n 8   No Petrolero Y PETRO                   132660 non-null  object \n 9   Código Subpartida                      132660 non-null  int64  \n 10  Suma de FOB (miles)                    132660 non-null  float64\n 11  Suma de TM (Peso Neto)                 132660 non-null  float64\ndtypes: float64(2), int64(6), object(4)\nmemory usage: 12.1+ MB\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Año</th>\n      <th>Mes</th>\n      <th>Capítulo</th>\n      <th>6D</th>\n      <th>8D</th>\n      <th>Código Subpartida</th>\n      <th>Suma de FOB (miles)</th>\n      <th>Suma de TM (Peso Neto)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>132660.000000</td>\n      <td>132660.000000</td>\n      <td>132660.000000</td>\n      <td>132660.000000</td>\n      <td>1.326600e+05</td>\n      <td>1.326600e+05</td>\n      <td>132660.000000</td>\n      <td>1.326600e+05</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2013.216079</td>\n      <td>6.579911</td>\n      <td>46.089605</td>\n      <td>462110.219900</td>\n      <td>4.621105e+07</td>\n      <td>4.621105e+09</td>\n      <td>1146.607523</td>\n      <td>2.052598e+03</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.905837</td>\n      <td>3.418723</td>\n      <td>32.252299</td>\n      <td>323127.220559</td>\n      <td>3.231272e+07</td>\n      <td>3.231272e+09</td>\n      <td>18218.890308</td>\n      <td>3.887714e+04</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2000.000000</td>\n      <td>1.000000</td>\n      <td>-9.000000</td>\n      <td>-999.000000</td>\n      <td>-9.990000e+02</td>\n      <td>-9.990000e+02</td>\n      <td>0.000000</td>\n      <td>1.000000e-07</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2007.000000</td>\n      <td>4.000000</td>\n      <td>15.000000</td>\n      <td>150990.000000</td>\n      <td>1.509900e+07</td>\n      <td>1.509900e+09</td>\n      <td>0.675000</td>\n      <td>5.500000e-02</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2014.000000</td>\n      <td>7.000000</td>\n      <td>44.000000</td>\n      <td>441820.000000</td>\n      <td>4.418200e+07</td>\n      <td>4.418200e+09</td>\n      <td>5.880610</td>\n      <td>7.000000e-01</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2019.000000</td>\n      <td>10.000000</td>\n      <td>83.000000</td>\n      <td>830160.000000</td>\n      <td>8.301600e+07</td>\n      <td>8.301600e+09</td>\n      <td>52.522330</td>\n      <td>1.496410e+01</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024.000000</td>\n      <td>12.000000</td>\n      <td>98.000000</td>\n      <td>980860.000000</td>\n      <td>9.808600e+07</td>\n      <td>9.808600e+09</td>\n      <td>954413.497500</td>\n      <td>1.467933e+06</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# División Train/Test y Pipeline\n\n::: {#5865b698 .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntarget_col = \"Suma de FOB (miles)\"\n\nnum_cols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]\ncat_cols = [c for c in df.columns if c not in num_cols]\n\nfeature_cols_num = [c for c in num_cols if c != target_col]\nfeature_cols_cat = cat_cols\n\nX = df[feature_cols_num + feature_cols_cat]\ny = df[target_col]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nnum_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"median\")),\n    (\"scaler\", StandardScaler())\n])\n\ncat_transformer = Pipeline(steps=[\n    (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n    (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\", sparse_output=False, max_categories=50))\n])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", num_transformer, feature_cols_num),\n        (\"cat\", cat_transformer, feature_cols_cat)\n    ]\n)\n\nmodel = Pipeline(steps=[(\"prep\", preprocessor), (\"reg\", LinearRegression())])\nmodel.fit(X_train, y_train)\n\ny_pred = model.predict(X_test)\nmse = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nmse, r2\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(57711921.78956072, 0.8444519773247486)\n```\n:::\n:::\n\n\n# Visualizaciones\n\n## Reales vs Predichos\n\n::: {#6fec5868 .cell execution_count=4}\n``` {.python .cell-code}\nplt.figure()\nplt.scatter(y_test, y_pred, alpha=0.4)\nlims = [min(y_test.min(), y_pred.min()), max(y_test.max(), y_pred.max())]\nplt.plot(lims, lims)\nplt.xlabel(\"Real\"); plt.ylabel(\"Predicho\")\nplt.title(\"Valores reales vs. predichos\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=598 height=449}\n:::\n:::\n\n\n## Curva de aprendizaje (muestra)\n\n::: {#fc85019b .cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn.model_selection import learning_curve\n\nsample_size = min(10000, len(X))\nX_sample = X.sample(sample_size, random_state=42)\ny_sample = y.loc[X_sample.index]\n\ntrain_sizes, train_scores, test_scores = learning_curve(\n    model, X_sample, y_sample, cv=3, scoring=\"r2\",\n    train_sizes=np.linspace(0.1, 1.0, 5)\n)\n\nplt.figure()\nplt.plot(train_sizes, train_scores.mean(axis=1), marker=\"o\", label=\"Entrenamiento\")\nplt.plot(train_sizes, test_scores.mean(axis=1), marker=\"o\", label=\"Validación CV\")\nplt.xlabel(\"Tamaño de entrenamiento (muestra)\")\nplt.ylabel(\"R² promedio (CV)\")\nplt.title(\"Curva de aprendizaje (muestra)\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=587 height=449}\n:::\n:::\n\n\n# Interpretación\n- Reporta **MSE** y **R²** y compáralos con la escala del objetivo.\n- Observa si hay **sobreajuste** en la curva de aprendizaje.\n- Si el desempeño no es suficiente, prueba **regularización** (Ridge/Lasso), **transformaciones** (log del objetivo), o **nuevas variables** (interacciones, efectos de mes/año).\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.min.js\" integrity=\"sha384-c9c+LnTbwQ3aujuU7ULEPVvgLs+Fn6fJUvIGTsuu1ZcCf11fiEubah0ttpca4ntM sha384-6V1/AdqZRWk1KAlWbKBlGhN7VG4iE/yAZcO6NZPMF8od0vukrvr0tg4qY6NSrItx\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js\" integrity=\"sha384-ZvpUoO/+PpLXR1lu4jmpXWu80pZlYUAfxl5NsBMWOEPSjUn/6Z/hRTt8+pR6L4N2\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}